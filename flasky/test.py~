
import pymysql

from datetime import datetime, timedelta
from flask import Flask
from flask import request, make_response
from flask import flash, abort
from flask import session, current_app, g
from flask import render_template, redirect, url_for
from flask import Blueprint
from flask_sqlalchemy import SQLAlchemy
from sqlalchemy.sql import and_
from flask_wtf import FlaskForm
from flask_login import UserMixin, LoginManager, AnonymousUserMixin, login_required, login_user, current_user, logout_user, fresh_login_required
from flask_socketio import SocketIO,emit
from wtforms import StringField, SubmitField, RadioField, PasswordField, TextField
from wtforms.validators import DataRequired, Length, EqualTo, ValidationError, Regexp
from werkzeug.security import generate_password_hash, check_password_hash

from threading import Lock

from gevent.wsgi import WSGIServer

from functools import wraps
from flask import abort
from flask_login import current_user


class Permission:
    FOLLOW = 1
    COMMENT = 2
    WRITE = 4
    ADMINISTRATOR = 8


def permission_required(permission):
    def decorator(f):
        @wraps(f)
        def decorated_function(*args, **kwargs):
            if not current_user.can(permission):
                abort(403)
            return f(*args, **kwargs)
        return decorated_function
    return decorator

def admin_required(f):
    return permission_required(Permission.ADMINISTRATOR)(f)


async_mode = None


pymysql.install_as_MySQLdb()

app = Flask(__name__)
auth = Blueprint('auth', __name__)


app.permanent_session_lifetime = timedelta(hours=24)

app.config['SECRET_KEY']="12345678"
app.config['USERNAME'] = 'root'
app.config['PASSWORD'] = '1991@clc'
app.config['HOSTNAME'] = 'localhost'
app.config['DATABASE'] = 'myweb'
app.config['SQLALCHEMY_DATABASE_URI']='mysql://'+app.config['USERNAME']+':'+app.config['PASSWORD']+'@'+app.config['HOSTNAME']+'/'+app.config['DATABASE']

app.config['FLASK_ADMIN'] = '614566327@qq.com'

app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

app.register_blueprint(auth, url_prefix='/auth')

db = SQLAlchemy(app)
socketio = SocketIO(app)
login_manager = LoginManager(app)
login_manager.login_view = 'login'

thread = None
thread_lock = Lock()

class LoginForm(FlaskForm):
    nickname = StringField(u'昵称', validators=[DataRequired()])
    password = PasswordField(u'密码', validators=[DataRequired(), Length(3,10)])
    submit = SubmitField(u'登入')

class UserProfileForm(FlaskForm):
    nickname = StringField(u'昵称', validators=[DataRequired()])
    gender = RadioField(u'性别', choices = [(u'男',u'男'), (u'女', u'女')], validators=[DataRequired()])
    email = StringField(u'邮箱', validators=[DataRequired()])
    submit = SubmitField(u'确认')


class AdminProfileForm(FlaskForm):
    name=StringField(u'姓名', validators=[DataRequired()])
    ID_num=StringField(u'身份证号', validators=[DataRequired()])
    submit = SubmitField(u'确认')
    

class RegisterForm(FlaskForm):
    nickname = StringField(u'昵称', validators=[DataRequired(), Length(4,32), Regexp('^[A-Za-z][A-Za-z0-9_]*', 0, '昵称必须由字母数字及下划线组成。')])
    name = StringField(u'姓名', validators=[DataRequired()])
    gender = RadioField(u'性别', choices = [(u'男',u'男'), (u'女', u'女')], validators=[DataRequired()])
    password = PasswordField(u'密码', validators=[DataRequired(message='密码不能为空'), Length(3, 10, message='密码长度为3到10位.'), EqualTo('password2', message='两次密码必须相同。')])
    password2 = PasswordField(u'确认密码', validators=[DataRequired(message='密码不能为空'), Length(3, 10)])
    email = StringField(u'邮箱', validators=[DataRequired()])
    ID_num = StringField(u'身份证号', validators=[DataRequired()])
    submit = SubmitField(u'确认')

    def validate_nickname(self, field):
        user = User.query.filter_by(nickname=field.data).first()
        if user is not None:
            flash('此昵称已被使用.')
            raise ValidationError('此昵称已被使用')

    def validate_email(self, field):
        user = User.query.filter_by(email=field.data).first()
        if user is not None:
            flash('此邮箱已被注册.')
            raise ValidationError('此邮箱已被注册')

    def validate_ID_num(self, field):
        user = User.query.filter_by(ID_num=field.data).first()
        if user is not None:
            flash('此身份证号已被注册.')
            raise ValidationError('此身份证号已被注册')


class PostForm(FlaskForm):
    title = StringField(u'标题',validators=[DataRequired()])
    body = TextField(u'正文', validators=[DataRequired()])
    submit = SubmitField(u'提交')
    

class CommentForm(FlaskForm):
    body = TextField(u'评论', validators=[DataRequired()])
    submit = SubmitField(u'评论')
    
    
@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))


class Friendship(db.Model):
    __tablename__ = 'friendships'
    follower_id = db.Column(db.Integer, db.ForeignKey('users.id'), primary_key=True)
    followed_id = db.Column(db.Integer, db.ForeignKey('users.id'), primary_key=True)
    time_stamp = db.Column(db.DateTime, index=True, default=datetime.utcnow)


class Role(db.Model):
    __tablename__ = 'roles'
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(64), unique=True)
    default = db.Column(db.Boolean, default=False, index=True)
    permissions = db.Column(db.Integer)
    users = db.relationship('User', backref='role', lazy='dynamic')

    def __init__(self, **kwargs):
        super(Role, self).__init__(**kwargs)
        if self.permissions is None:
            self.permissions = 0

    def add_permission(self, permission):
        if not self.has_permission(permission):
            self.permissions += permission

    def remove_permissions(self, permission):
        if self.has_permission(permission):
            self.permissions -= permission

    def reset_permission(self):
        self.permissions = 0

    def has_permission(self, permission):
        return self.permissions & permission == permission
    
    @staticmethod
    def insert_roles():
        roles = {
            'User':[Permission.FOLLOW, Permission.WRITE, Permission.COMMENT],
            'Administrator':[Permission.FOLLOW, Permission.WRITE, Permission.COMMENT, Permission.ADMINISTRATOR],
        }
        default_role = 'User' 
        for r in roles:
            role = Role.query.filter_by(name=r).first()
            if role is None:
                role = Role(name=r)
            role.reset_permission()
            for perm in roles[r]:
                role.add_permission(perm)
                role.default = (role.name == default_role)
                db.session.add(role)
        db.session.commit()
    

class User(UserMixin, db.Model):
    __tablename__ = 'users'
    id = db.Column(db.Integer, primary_key=True)
    nickname = db.Column(db.String(64), index=True, unique=True, nullable=False)
    name = db.Column(db.String(64), index=True, nullable=False)
    gender = db.Column(db.String(32), nullable=False)
    ID_num = db.Column(db.String(64), nullable=False, unique=True)
    email = db.Column(db.String(64), unique=True)
    password = db.Column(db.String(64), nullable=False)
    password_hash = db.Column(db.String(128))
    posts = db.relationship('Post', backref='author', lazy=True)
    comments = db.relationship('Comment', backref='author', lazy=True)
    last_seen = db.Column(db.DateTime, default=datetime.utcnow)
    state = db.Column(db.Boolean, default=False)
    session_id = db.Column(db.String(128), default=None)
    role_id = db.Column(db.Integer, db.ForeignKey('roles.id'))
    receive_msgs = db.relationship('Message', backref='receiver', lazy='dynamic')
    follower_of=db.relationship('Friendship',
                                foreign_keys=[Friendship.follower_id],
                                backref=db.backref('follower', lazy='joined'),
                                lazy='dynamic',
                                cascade='all, delete-orphan')
    followed_by=db.relationship('Friendship',
                                foreign_keys=[Friendship.followed_id],
                                backref=db.backref('followed', lazy='joined'),
                                lazy='dynamic',
                                cascade='all, delete-orphan')
    friends = db.Column(db.Text)

    def __init__(self, **kwargs):
        super(User, self).__init__(**kwargs)
        if self.role is None:
            if self.email == current_app.config['FLASK_ADMIN']:
                self.role = Role.query.filter_by(name='Administrator').first()
            if self.role is None:
                self.role = Role.query.filter_by(default=True).first()
    
    @property
    def password(self):
        raise AttributeError('password is not a readable attribute')

    @password.setter
    def password(self, password):
        self.password_hash = generate_password_hash(password)

    def verify_password(self, password):
        return check_password_hash(self.password_hash, password)

    def follow(self, user):
        if not self.is_following(user):
            f = Friendship(follower=self, followed=user)
            db.session.add(f)

    def unfollow(self, user):
        f = self.follower_offilter_by(followed_id=user.id).first()
        if f:
            db.session.delete(f)

    def is_following(self, user):
        if user.id is None:
            return False
        return self.follower_of.filter_by(followed_id=user.id).first() is not None

    def is_followed_by(self, user):
        if user.id is None:
            return False
        return self.followed_by.filter_by(follower_id=user.id).first() is not None

    def be_friend(self, user):
        if user.id is not None and self.is_following(user) and self.is_followed_by(user) and not self.is_friend(user):
            if self.friends is None:
                self.friends=''
            if user.friends is None:
                user.friends=''
            self.friends = self.friends+' '+str(user.id)+' '
            user.friends = user.friends+' '+str(self.id)+' '
            db.session.add(self)
            db.session.add(user)
            return True
        return False

    def delete_friend(self, user):
        if user.id is not None and self.if_friend(user):
            str_user = ' '+str(user.id) + ' '
            str_self = ' ' + str(self.id) + ' '
            self.friends.replace(str_user, '')
            self.unfollow(user)
            user.friends.replace(str_self, '')
            db.session.add(self)
            db.session.add(user)
            return True
        return False

    def is_friend(self, user):
        if user.id is not None and self.friends is not None and user.friends is not None:
            str_user = ' '+str(user.id) + ' '
            str_self = ' ' + str(self.id) + ' '
            if str_user in self.friends and str_self in user.friends:
                return True
            else:
                return False
        return False

    def get_friends(self):
        if self.friends:
            for str_friend in self.friends.strip().split('  '):
                friend = User.query.filter_by(id=int(str_friend)).first()
                if friend:
                    yield friend

    def can(self, permission):
        return self.role is not None and (self.role.permissions & permission)==permission

    def is_administrator(self):
        return self.can(Permission.ADMINISTRATOR)


class AnonymousUser(AnonymousUserMixin):
    def can(self, permissions):
        return False

    def is_administrator(self):
        return False

login_manager.anonymous_user = AnonymousUser
                    
class Post(db.Model):
    __tablename__ = 'posts'
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(64), nullable=False)
    body = db.Column(db.Text)
    author_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)
    state = db.Column(db.Boolean)
    time_stamp = db.Column(db.DateTime, index=True, default=datetime.utcnow)
    comments = db.relationship('Comment', backref='post', lazy=True)
    
    
class Comment(db.Model):
    __tablename__ = 'comments'
    id = db.Column(db.Integer, primary_key=True)
    body=db.Column(db.Text)
    state = db.Column(db.Boolean, default=True, nullable=False)
    post_id = db.Column(db.Integer, db.ForeignKey('posts.id'), nullable=False)
    author_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)
    time_stamp = db.Column(db.DateTime, index=True, default=datetime.utcnow)


class Message(db.Model):
    __tablename__ = 'messages'
    id = db.Column(db.Integer, primary_key=True)
    data = db.Column(db.Text)
    receiver = db.Column(db.Integer, db.ForeignKey('users.nickname'), nullable=False)
    state = db.Column(db.String(16),default=True, nullable=False)
    time = db.Column(db.String(64), index=True)

    
@app.route('/', methods = ['POST', 'GET'])
def index():
    posts = Post.query.all()
    return render_template('index.html', posts=posts)
    

@app.route('/login', methods = ['POST', 'GET'])
def login():
    form = LoginForm()
    if form.validate_on_submit():
        user = User.query.filter_by(nickname=form.nickname.data).first()
        if user is not None:
            if user.verify_password(form.password.data):
                login_user(user, 1)
                user.state=True
                db.session.add(user)
                db.session.commit()
                next = request.args.get('next')
                if next is None or not next.startswith('/'):
                    next = url_for('.index')
                return redirect(next)
        flash(u'不存在此用户.')
    return render_template('auth/login.html', form=form)
    
@app.route('/logout')
@login_required
def logout():
    current_user.state = False
    current_user.session_id=None
    db.session.add(current_user)
    db.session.commit()
    logout_user()
    flash('您已经退出登录.')
    return redirect(url_for('.index'))
    

@app.route('/register', methods = ['POST', 'GET'])
def register():
    form = RegisterForm()
    if form.validate_on_submit():
        user = User(nickname=form.nickname.data,
                    name=form.name.data,
                    gender=form.gender.data,
                    password=form.password.data,
                    ID_num=form.ID_num.data,
                    email=form.email.data,
                    state=True)
        db.session.add(user)
        db.session.commit()
        login_user(user, 1)
        db.session.add(user)
        db.session.commit()
        next = request.args.get('next')
        if next is None or not next.startswith('/'):
            next = url_for('.index')
        return redirect(next)
    return render_template('register.html', form=form)    


@app.route('/user/<nickname>', methods=['POST', 'GET'])
@login_required
def user(nickname):
    postform = PostForm()
    user = User.query.filter_by(nickname=nickname).first()
    posts = user.posts
    if user is not None:
        return render_template('user.html', user=user, posts=posts)
    return redirect(url_for('.index'))


@app.route('/post/<post_id>', methods=['GET', 'POST'])
@login_required
def post(post_id):
    post = Post.query.filter_by(id=post_id).first()
    if post is None:
        next = request.args.get('next')
        if next is None or not next.startswith('/'):
            next = url_for('.index')  
        flash('不存在此文章.')
        return redirect(next)
    return render_template('post.html', post=post, form=None)


@app.route('/follow/<nickname>')
@login_required
def follow(nickname):
    user = User.query.filter_by(nickname=nickname).first()
    if user is not None:
        if current_user.is_following(user):
            if current_user.is_friend(user):
                flash('您已和此用户是朋友。')
            else:
                flash('您已添加加此用户为朋友.')
            return redirect(url_for('.user', nickname=user.nickname))
        current_user.follow(user)
        if current_user.is_followed_by(user):
            current_user.be_friend(user)
        if current_user.is_friend(user):
            flash('你们已是朋友.')
        else:
            flash('您刚刚关注了{}'.format(user.nickname))
        db.session.commit()
        return redirect(url_for('.user', nickname=user.nickname))
    flash('不存在用户{}'.format(nickname))
    return redirect(url_for('.index'))


@app.route('/edit-post', methods=['GET', 'POST'])
@login_required
def edit_post():
    postform = PostForm()
    post_id=request.args.get('post_id')
    if post_id is not None:
        post = Post.query.filter_by(id=post_id).first()
        if post is None:
            flash('无此文章,您可以创建新内容.')
            return redirect(url_for('.edit_post'))
    else:
        post=Post()
    if postform.validate_on_submit():
        post.title = postform.title.data
        post.body = postform.body.data
        post.author = current_user._get_current_object()
        db.session.add(post)
        db.session.commit()
        return redirect(url_for('.post', post_id=post.id))
    postform.title.data = post.title
    postform.body.data=post.body
    return render_template('edit_post.html', form=postform)


@app.route('/state-post/<id>')
@login_required
@admin_required
def state_post(id):
    post = Post.query.filter_by(id=id).first()
    if post:
        post.state = not post.state
        db.session.add(post)
        db.session.commit()
        next = request.args.get('next')
        if next is None or not next.startswith('/'):
            next = url_for('.administrate')
    return redirect(next)


@app.route('/comment-post/<post_id>', methods=['GET', 'POST'])
@login_required
def comment(post_id):
    post = Post.query.filter_by(id=post_id).first()
    if post is None:
        flash('无此文章')
        return redirect(url_for('.index'))
    form = CommentForm()
    if form.validate_on_submit():
        comment = Comment(body=form.body.data,
                          post_id=post.id,
                          state=True,
                          author_id=current_user.id)
        db.session.add(comment)
        db.session.commit()
        return redirect(url_for('.post', post_id=post.id))
    return render_template('post.html', post=post, form=form)
        

@app.route('/delete-post/<post_id>', methods=['POST'])
@login_required
def delete_post(post_id):
    post = Post.query.filter_by(id=post_id).first()
    if post is not None:
        if current_user.is_authenticated and current_user == post.author:
            db.session.delete(post)
            db.session.commit()
    else:
        flash('不存在此文章。')
    return redirect(url_for('.user', nickname=current_user.nickname))


@app.route('/delete-comment/<comment_id>', methods=['GET','POST'])
@login_required
def delete_comment(comment_id):
    comment = Comment.query.filter_by(id=comment_id).first()
    post = Post.query.filter_by(id=comment.post_id).first()
    if comment is not None:
        if current_user.is_authenticated and current_user == comment.author:
            db.session.delete(comment)
            db.session.commit()
    else:
        flash('无此评论。')
    return redirect(url_for('.post', post_id=post.id))


@app.route('/state-comment/<comment_id>', methods=['GET', 'POST'])
@login_required
def state_comment(comment_id):
    comment = Comment.query.filter_by(id=comment_id).first()
    if comment is not None:
        if current_user.is_authenticated and current_user.is_administrator():
            comment.state = not comment.state
            db.session.add(comment)
            db.session.commit()
            next = request.args.get('next')
            if next is None or not next.startswith('/'):
                next = url_for('.administrate')
            return redirect(next)
    return redirect(url_for('.administrate'))


@app.route('/edit-profile/<nickname>', methods = ['GET','POST'])
@fresh_login_required
def edit_profile(nickname):
    user = User.query.filter_by(nickname=nickname).first()
    profileform = None
    if user is None:
        return redirect(url_for('.index'))
    if current_user == user:
        profileform = UserProfileForm()
    elif current_user.is_administrator():
        profileform = AdminProfileForm()
    else:
        flash('您不是此用户，不可编辑其信息！')
        return redirect(url_for('.index'))
    if profileform.validate_on_submit():
        if isinstance(profileform, UserProfileForm):
            user.nickname = profileform.nickname.data
            user.gender = profileform.gender.data
            user.email = profileform.email.data
        else:
            user.name = profileform.name.data
            user.ID_num = profileform.ID_num.data
        db.session.add(user)
        db.session.commit()
        login_user(user, 1)
        next = request.args.get('next')
        if next is None or not next.startswith('/'):
            next = url_for('.index')
        return redirect(next)
    if isinstance(profileform, UserProfileForm):
        profileform.nickname.data = user.nickname
        profileform.gender.data = user.gender
        profileform.email.data = user.email
    else:
        profileform.name.data = user.name
        profileform.ID_num.data = user.ID_num
    return render_template('edit_profile.html', form=profileform)


@app.route('/unshow/<nickname>', methods=['POST','GET'])
@login_required
def unshow(nickname):
    user = User.query.filter_by(nickname=nickname).first()
    if user is not None and current_user == user:
        unshows=[]
        for message in current_user.messages:
            if message.type=='unshow':
                unshows.append(message)
        if not len(unshows):
            unshows=None
        return render_template('unshow.html', unshows=unshows)


@app.route('/webchat/<nickname>', methods=['POST','GET'])
@login_required
def webchat(nickname):
    user = User.query.filter_by(nickname=nickname).first()
    if user == current_user:
        return redirect(url_for('.index'))
    unshows = Message.query.filter(and_(Message.receiver==current_user.nickname, Message.sender==user.nickname, Message.state=='unshow')).all()
    if unshows:
        for unshow in unshows:
            unshow.state = 'received'
            db.session.add(unshow)
        db.session.commit()
    else:
        unshows = None
    if user:
        return render_template('webchat.html', user=user, unshows=unshows)
    return redirect(url_for('.index'))


@app.route('/administrate/posts')
@login_required
def show_posts():
    resp = make_response(redirect(url_for('.administrate')))
    resp.set_cookie('posts', 'posts', max_age=30*24*60*60)
    resp.set_cookie('comments', '', max_age=30*24*60*60)
    resp.set_cookie('users', '', max_age=30*24*60*60)
    return resp


@app.route('/administrate/comments')
@login_required
def show_comments():
    resp = make_response(redirect(url_for('.administrate')))
    resp.set_cookie('posts', '', max_age=30*24*60*60)
    resp.set_cookie('comments', 'comments', max_age=30*24*60*60)
    resp.set_cookie('users', '', max_age=30*24*60*60)
    return resp


@app.route('/administrate/users')
@login_required
def show_users():
    resp = make_response(redirect(url_for('.administrate')))
    resp.set_cookie('posts', '', max_age=30*24*60*60)
    resp.set_cookie('comments', '', max_age=30*24*60*60)
    resp.set_cookie('users', 'users', max_age=30*24*60*60)
    return resp


@app.route('/administrate', methods=['POST', 'GET'])
@login_required
@admin_required
def administrate():
    if not current_user.is_administrator():
        return redirect(url_for('.index'))
    if current_user.is_authenticated and current_user.is_administrator():
        items=None
        if bool(request.cookies.get('posts', 'posts')):
            items = Post.query.all()
        elif bool(request.cookies.get('comments', 'comments')):
            items = Comment.query.all()
        elif bool(request.cookies.get('users', 'users')):
            items = User.query.all()
    return render_template('administrate.html', items=items)
        

@app.route('/error')
@app.errorhandler(401)
def error(e):
    app.logger.debug("error occurred:%s" % e)
    try:
        code = e.code
        if code == 401:
            flash("您需要重新登录.")
    except Exception as e:
        app.logger.debug('exception is %s' % e)
    finally:
        form = LoginForm()
        form.nickname.data = current_user.nickname
        logout_user()
        return render_template('auth/login.html', form=form)

"""
@socketio.on('connect', namespace='/test_conn')
def test_connect():
    global thread
    with thread_lock:
        if thread is None:
            thread = socketio.start_background_task(target=background_thread)

def background_thread():
    while True:
        socketio.sleep(1)
        t = datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')
        socketio.emit('server_response', {'data':t}, namespace='/test_conn')
"""

@socketio.on('imessage', namespace='/client_conn')
def test_message(message):
    if current_user.is_authenticated:
        if message['data'] == '' or current_user.session_id != request.sid:
            current_user.session_id = request.sid
            db.session.add(current_user)
            db.session.commit()
        elif message['state']=='sending':
            user = User.query.filter_by(nickname=message['receiver']).first()
            if user:
                emit('message',
                     {'data':message['data'],
                      'sender':current_user.nickname,
                      'receiver':user.nickname,
                      'time':(datetime.utcnow()+timedelta(hours=8)).strftime('%Y-%m-%d %H:%M:%S'),
                      'state':'sent'},
                     room=user.session_id)
        elif message['state'] in('unshow', 'received'):
            message = Message(sender = message['sender'],
                              receiver = message['receiver'],
                              data=message['data'],
                              time=(datetime.utcnow()+timedelta(hours=8)),
                              state=message['state'])
            db.session.add(message)
            db.session.commit()
      
        
if __name__ =='__main__':
    socketio.run(app, host='0.0.0.0', port=80, debug=True)
    #app.run(host='0.0.0.0', port=80, debug=True, threaded=True)
